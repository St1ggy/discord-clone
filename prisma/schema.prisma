// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DB_URL")
  relationMode = "prisma"
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  servers  Server[]
  members  Member[]
  channels Channel[]
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("Member1")
  conversationsReceived  Conversation[] @relation("Member2")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  type ChannelType @default(TEXT)
  name String

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Conversation {
  id String @id @default(uuid())

  member1   Member @relation("Member1", fields: [member1Id], references: [id], onDelete: Cascade)
  member1Id String

  member2   Member @relation("Member2", fields: [member2Id], references: [id], onDelete: Cascade)
  member2Id String

  sirectMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([member1Id, member2Id])
  @@index([member1Id])
  @@index([member2Id])
}

model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String

  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
